syntax = "proto3";

package com.uddernetworks.grpc;

// Represents a file to be sent over
message ListItem {
    string name = 1;
    string id = 2;
    string path = 3;
    int32 sheets = 5;
    int64 size = 6;
    int64 date = 7;
    bool selfOwned = 8;
    string owner = 9;
    string driveLink = 10;
    bool starred = 11;
    bool trashed = 12;
}

message ListRequest {
    string token = 1; // The Google authentication token
    string path = 2; // The remote drive path to list
    bool starred = 3; // Show starred files (true) or all files (false)
    bool trashed = 4; // If it should be listing trashed files
}

message ListResponse {
    repeated ListItem items = 1; // A list of items retrieved
    repeated string folders = 2; // A list of all folders present
}

message UploadRequest {
    string token = 1; // The Google authentication token
    string path = 2; // The absolute Google Drive path of the upload
    string name = 3; // The name of the file, to not rely on path name
    string id = 4; // The file ID, if cloning
    Upload upload = 5; // The upload type
    Compression compression = 6; // The compression setting
    int64 sheetSize = 7; // The maximum size (in bytes) each sheet can be
    int64 fileSize = 8;
    string processingId = 9; // The untrimmed unique processing UUID
    string localPath = 10; // Instead of creating a processor and accepting chunks via gRPC, it uploads this absolute
    // file path in chunks. This is should only be used for local uploads, and is normally null.

    enum Upload {
        MULTIPART = 0;
        DIRECT = 1;
    }

    enum Compression {
        NONE = 0;
        ZIP = 1;
    }
}

message UploadResponse {
    UploadStatus uploadStatus = 1;
    ListItem item = 2; // The new ListItem uploaded. This populated if the status is COMPLETE.

    enum UploadStatus {
        READY = 0;
        COMPLETE = 1;
    }
}

message FileChunk {
    string processingId = 1; // The untrimmed processing UUID of the upload. No authentication is needed due to this
    // always being abstracted by something like a webserver.

    bytes content = 2; // The file content. May be empty if the status is ChunkStatus.Terminated
    ChunkStatus status = 3; // The status of the transfer

    enum ChunkStatus {
        Normal = 0;
        Complete = 1;
        Terminated = 2;
    }
}

message ChunkResponse {
    int64 currentBuffer = 1; // The amount of bytes not processed yet in the current buffer
}

message CreateFolderRequest {
    string token = 1; // The Google authentication token
    string path = 2; // The total path to create, creating any parents as necessary.
}

message FolderResponse {
}

message DownloadRequest {
    string token = 1; // The Google authentication token
    string id = 2; // The Sheets-generated ID of the file to download
    string path = 3; // The local file path to save the file to
}

message DownloadResponse {
    DownloadStatus status = 1; // The download status
    double percentage = 2; // The 0-1 percentage of the download
    ListItem item = 3; // The file uploaded. Only not-null when status is COMPLETE

    enum DownloadStatus {
        PENDING = 0;
        DOWNLOADING = 1;
        COMPLETE = 2;
    }
}

message RemoveRequest {
    string token = 1; // The Google authentication token
    string id = 2; // The Sheets-generated ID of the file to remove
    bool permanent = 3; // If the deletion should skip the trash
}

message RemoveResponse {
}

message RestoreRequest {
    string token = 1; // The Google authentication token
    string id = 2; // The Sheets-generated ID of the file to remove
}

message RestoreResponse {
}

message StarRequest {
    string token = 1; // The Google authentication token
    string id = 2; // The Sheets-generated ID of the file to download
    bool starred = 3; // If the file should be starred
}

message StarResponse {
}

message MoveFileRequest {
    string token = 1; // The Google authentication token
    string id = 2; // The Sheets-generated ID of the file to download
    string path = 3; // The path to move the file to. This path will be the PARENT of the file
}

message MoveFileResponse {
}

message RenameRequest {
    string token = 1; // The Google authentication token
    string id = 2; // The Sheets-generated ID of the file to download
    string name = 3; // The new name of the file
}

message RenameResponse {
}

service HolySheetService {

    // Lists files with an optional path
    rpc listFiles(ListRequest) returns (ListResponse);

    // Starts the upload of a file. This essentially creates a virtual "processor" as the given processing ID, and as
    // "FileChunk"s (via sendFile()) come in, the data is processed and uploaded accordingly to avoid any file IO server-side.
    // A response is sent when the sendFile() method is complete.
    rpc uploadFile(UploadRequest) returns (stream UploadResponse);

    rpc createFolder(CreateFolderRequest) returns (FolderResponse);

    // Sends a file data stream to be processed to avoid filesystem IO.
    // This does NOT have to provide authentication, as this should never be sent standalone
    // and should provide the processingId which is identifying of the previous
    // authenticated request.
    rpc sendFile(stream FileChunk) returns (stream ChunkResponse);

    // Downloads a remote file
    rpc downloadFile(DownloadRequest) returns (stream DownloadResponse);

    // Removes a remote file
    rpc removeFile(RemoveRequest) returns (RemoveResponse);

    // Restores a trashed file
    rpc restoreFile(RestoreRequest) returns (RestoreResponse);

    // Star a given file
    rpc starRequest(StarRequest) returns (StarResponse);

    // Moves a file from one path to another
    rpc moveFile(MoveFileRequest) returns (MoveFileResponse);

    // Renames a given file to a new name
    rpc renameFile(RenameRequest) returns (RenameResponse);
}

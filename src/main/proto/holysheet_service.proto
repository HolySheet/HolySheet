syntax = "proto3";

package com.uddernetworks.grpc;

// Represents a file to be sent over
message ListItem {
    string name = 1;
    string id = 2;
    string path = 3;
    bool folder = 4;
    int32 sheets = 5;
    int64 size = 6;
    int64 date = 7;
    bool selfOwned = 8;
    string owner = 9;
    string driveLink = 10;
    bool starred = 11;
    bool trashed = 12;
}

// Used in code execution, to hold data of a variable
message SerializedVariable {
    string name = 1; // Name of the variable
    string type = 2; // The Java class type
    string object = 3; // JSON Serialized data
}


message ListRequest {
    string token = 1; // The Google authentication token
    string path = 2; // The remote drive path to list
    bool starred = 3; // Show starred files (true) or all files (false)
    bool trashed = 4; // If it should be listing trashed files
}

message ListResponse {
    repeated ListItem items = 1; // A list of items retrieved
}

message UploadRequest {
    string token = 1; // The Google authentication token
    string file = 2; // The file path, if uploading
    string name = 3; // The name of the file, to not rely on path name
    string id = 4; // The file ID, if cloning
    Upload upload = 5; // The upload type
    Compression compression = 6; // The compression setting
    int64 sheetSize = 7; // The maximum size (in bytes) each sheet can be

    enum Upload {
        MULTIPART = 0;
        DIRECT = 1;
    }

    enum Compression {
        NONE = 0;
        ZIP = 1;
    }
}

message UploadResponse {
    UploadStatus status = 1; // The upload status
    double percentage = 2; // The 0-1 percentage of the upload
    ListItem item = 3; // The new ListItem uploaded. This populated if the status is COMPLETE.

    enum UploadStatus {
        PENDING = 0;
        UPLOADING = 1;
        COMPLETE = 2;
    }
}

message DownloadRequest {
    string token = 1; // The Google authentication token
    string id = 2; // The Sheets-generated ID of the file to download
    string path = 3; // The local file path to save the file to
}

message DownloadResponse {
    DownloadStatus status = 1; // The download status
    double percentage = 2; // The 0-1 percentage of the download
    ListItem item = 3; // The file uploaded. Only not-null when status is COMPLETE

    enum DownloadStatus {
        PENDING = 0;
        DOWNLOADING = 1;
        COMPLETE = 2;
    }
}

message RemoveRequest {
    string token = 1; // The Google authentication token
    string id = 2; // The Sheets-generated ID of the file to remove
    bool permanent = 3; // If the deletion should skip the trash
}

message RemoveResponse {
}

message RestoreRequest {
    string token = 1; // The Google authentication token
    string id = 2; // The Sheets-generated ID of the file to remove
}

message RestoreResponse {
}

message CodeExecutionRequest {
    string code = 1; // A snippet of Java code, exactly one complete snippet of source code, that is, one expression,
    // statement, variable declaration, method declaration, class declaration, or import. - JShell. Invoked on the server

    repeated string returnVariables = 2; // A list of extra variables to return in the response
}

message CodeExecutionResponse {
    repeated string snippetResult = 1; // A list of implicit or explicitly created variables in the snippet
    repeated SerializedVariable variables = 2; // A list of variables listed in the request via returnVariables, and in this response via snippetResult
}

message CodeExecutionCallbackResponse {
    string callbackState = 1; // An untrimmed UUID (Set in the code) to identify the callback
    repeated string snippetResult = 2; // A list of variable names passed to the callback, sent by the client
    repeated SerializedVariable variables = 3; // A list of all variables listed in the snippetResult
}

message ListenCallbacksRequest {
}

message StarRequest {
    string token = 1; // The Google authentication token
    string id = 2; // The Sheets-generated ID of the file to download
    bool starred = 3; // If the file should be starred
}

message StarResponse {
}

message MoveFileRequest {
    string token = 1; // The Google authentication token
    string id = 2; // The Sheets-generated ID of the file to download
    string path = 3; // The path to move the file to. This path will be the PARENT of the file
}

message MoveFileResponse {
}

service HolySheetService {

    // Lists files with an optional path
    rpc listFiles(ListRequest) returns (ListResponse);

    // Uploads a file
    rpc uploadFile(UploadRequest) returns (stream UploadResponse);

    // Downloads a remote file
    rpc downloadFile(DownloadRequest) returns (stream DownloadResponse);

    // Removes a remote file
    rpc removeFile(RemoveRequest) returns (RemoveResponse);

    // Restores a trashed file
    rpc restoreFile(RestoreRequest) returns (RestoreResponse);

    // Executes Java code on the server
    rpc executeCode(CodeExecutionRequest) returns (CodeExecutionResponse);

    // Should only be invoked once. Streams back all callbacks
    rpc listenCallbacks(ListenCallbacksRequest) returns (stream CodeExecutionCallbackResponse);

    // Star a given file
    rpc starRequest(StarRequest) returns (StarResponse);

    // Moves a file from one path to another
    rpc moveFile(MoveFileRequest) returns (MoveFileResponse);
}
